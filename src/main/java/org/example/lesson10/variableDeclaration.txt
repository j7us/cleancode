if (amount < 0) {throw new IllegalArgumentException("Указана отрицательная масса");}
// Добавил в код проверку отрицательной массы в бин, который ответственен за отображение в jsf



var query - String query
// Понимаю, что даже при использовании var из lombook или из java 17+, в java явное объявление переменных,
// но большое кол-во var в локальных переменных на одну функцию все равно сбивает с толку



var resultDeposit = AsdvRs.getValue - Deposit resultDeposit = AsdvRs.getValue
// Заменил var в коде на явное объявление



val actList = new ArrayList<>() - List<TransshipmentAct> acts = new ArrayList<>()
// Заменил var на явное объявление List



if (finalPrice <= 0) {throw new IllegalArgumentException("Не указана финальная цена");}
// Добавил проверку для не заполненной или отрицательной итоговой стоимости



boolean isEqualsChar = false;
// Некоторый код и объявление других переменных
for (String i = stack.pop(); i != null && !isEqualsChar; i = stack.pop()) {}
-
boolean isEqualsChar = false;
for (String i = stack.pop(); i != null && !isEqualsChar; i = stack.pop()) {}
// Перенес инициализацию переменной, которая участвует только в цикле ближе к началу самого цикла
// (взято из задачи про стек)




Stack<Character> stack = new Stack<>();
// Код заполнения Map parentheses
for (Character ch : parentheses.toCharArray()) {}
-
Stack<Character> stack = new Stack<>();
for (Character ch : parentheses.toCharArray()) {}
//Перенес инициализацию стека ближе к for (из задач к очередям)




Node<T> node = new Node<>(val);
// Объявление других переменных
for (; maxIndex >= minIndex;) {
    if (compareNodeWithAsc(midNode, node) == 0) {
        ind = midIndex;
        maxIndex = midIndex - 1;
    } else if (compareNodeWithAsc(midNode, node) < 0) {
        minIndex = midIndex + 1;
    } else {
        maxIndex = midIndex - 1;
    }
}
-
Node<T> node = new Node<>(val);
for (; maxIndex >= minIndex;) {
    if (compareNodeWithAsc(midNode, node) == 0) {
        ind = midIndex;
        maxIndex = midIndex - 1;
    } else if (compareNodeWithAsc(midNode, node) < 0) {
        minIndex = midIndex + 1;
    } else {
        maxIndex = midIndex - 1;
    }
}
// Перенес инициализацию переменной, которая участвует только в цикле ближе к началу самого цикла
// (из задачи про ассоциативный массив)




String operUid = Convert.toOperUid(getAsdvRs.getId, kard);
//Много кода и сторонней логики
try{
String tfgRqJson = jsonObjectMapper.writeAsString(tfgRq);
kafkaSender.send(tfgRqJson);
} catch( Throwable th) {
    throw new RuntimeException("Не удалось отправить запрос с id: " + operUid);
}
-
String operUid = Convert.toOperUid(getAsdvRs.getId, kard);
try{
String tfgRqJson = jsonObjectMapper.writeAsString(tfgRq);
kafkaSender.send(tfgRqJson);
} catch( Throwable th) {
    throw new RuntimeException("Не удалось отправить запрос с id: " + operUid);
}
// Перенес инициализацию переменной, которая использовалась в блоке catch




String operUid = Convert.toOperUid(getAsdvRs.getId, kard);
//Много кода и сторонней логики
try{
String tfgRqJson = jsonObjectMapper.writeAsString(tfgRq);
kafkaSender.send(tfgRqJson);
} catch( Throwable th) {
    throw new RuntimeException("Не удалось отправить запрос с id: " + operUid);
}
callSchedulerCheckResponse();
-
String operUid = Convert.toOperUid(getAsdvRs.getId, kard);
//Много кода и сторонней логики
try{
String tfgRqJson = jsonObjectMapper.writeAsString(tfgRq);
kafkaSender.send(tfgRqJson);
} catch( Throwable th) {
    throw new RuntimeException("Не удалось отправить запрос с id: " + operUid);
}
operUid = "ERROR"
callSchedulerCheckResponse();
// Присвоил переменной недопустимое значение после окончания работы с ней и переходу к дальнейшей обработке ответа




Kard kard = new Kard();
String callReason = "Отмена списания пользователем";
if (code == Code.Undo) {
    kard.setCallReason(callReason);
} else {
    kard.setInitialCall(callReason);
}
-
Kard kard = new Kard();
final String callReason = "Отмена списания пользователем";
if (code == Code.Undo) {
    kard.setCallReason(callReason);
} else {
    kard.setInitialCall(callReason);
}
// Добавил final к переменной, которая хранит часто используемое значение, можно было бы заменить на константу




Kard kard = new Kard();
String callReason = "Отмена списания пользователем";
if (code == Code.Undo) {
    kard.setCallReason(callReason);
} else {
    kard.setInitialCall(callReason);
}
-
Kard kard = new Kard(code);
// Перенес в конструктор условия инициализации полей в зависимости от code




ErrorEvent event = new ErrorEvent(header, body);
event.setKey(typeId);
-
ErrorEvent event = new ErrorEvent(header, body, typeId);
// Добавил перегруженный конструктор и инициализацию поля key вместе с остальными полями в конструкторе




PlanBatch currentPb = tankerload.getPlanBatch();
updateDocuments(currentPb);
updateProducer(currentPb);
-
PlanBatch currentPb = tankerload.getPlanBatch();
updateDocuments(currentPb);
updateProducer(currentPb);
currentPb = null;
// Добавил присвоение недопустимого значения при окончании работы с переменной




AsdvRs asdvRs = (AsdvRs.class) Event.getBody();
AsdvRsRepository.save(asdvRs);
String externalId = asdvRs.getExternalId();
// Дальше продолжается работа с externalId
-
AsdvRs asdvRs = (AsdvRs.class) Event.getBody();
AsdvRsRepository.save(asdvRs);
String externalId = asdvRs.getExternalId();
asdvRs = null;
// Добавил присвоение недопустимого значения при окончании работы с переменной