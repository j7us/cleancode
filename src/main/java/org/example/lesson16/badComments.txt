// Для процессинга используются следующие шаги:
// Получить сообщение из топика
// Проверить на наличие дто со статусом в бд
// Если у event есть поля cancel, то запускаем обработку
... Еще 10 строк
// Отправляем в Атл и запускаем шедулер на проверку ответа
public void process() {}
-- Излишне объемный комментарий в начале метода, который дублирует документацию, но при этом
-- дальше в методе есть комментарии с шагами в местах, где они выполняются, убрал бы комментарий (пункт 8)




// Для процессинга используются следующие шаги:
// Получить сообщение из топика
// Проверить на наличие дто со статусом в бд
// Запускаем создание запроса на основе operation
... Еще 10 строк
// Отправляем в Уе и запускаем шедулер на проверку ответа
public void process() {}
-- Аналогично очень большой комментарий в начале метода (пункт 8)




// Получаем из контроллера сообщение
// Проверяем документ на дублирование
// Если document имеет cancelType, то сэтим из него operationId
... Еще 10 строк
// Отправляем в Уе и запускаем шедулер на проверку ответа
public void process() {String documentOperation}
-- Аналогично очень большой комментарий в начале метода (пункт 8)




// Метод вызывается из классов PlanBatchManager и TransshipmentManager для уточнения типа партии
public boolean isSea(Shipment shipment) {}
-- Комментарий не несет какой-то определенной смысловой нагрузки, посмотреть откуда вызывается метод можно в IDEA (пункт 4)




// TODO рассмотреть возможность добавления абстрактного класса
public void getUserInfo() {}
-- Комментарий скорее относится к техническому долгу и не несет информации о работе метода (пункт 1)




// TODO заменить на стандартный класс фильтра
public class InspectorsFilter {}
-- Комментарий скорее относится к техническому долгу и не несет информации о работе метода (пункт 1)




// Если запрос для отмены, то отправить его в атл и отправить отмену в ук
if (event.getCancelType() == CancelType.Cancel) {
    String eventJson = objectMapper.toJson(event);
    callAtl(eventJson);
    kafkaSender.send(eventJson);
}
-- Комментарий просто дублирует код, но не объясняет, следует удалить, а код вынести в отдельную функцию (пункт 12)




// TODO обдумать переноса в отдельный класс все функции определения массы
public BigDecimal calculateGostAmount() {}
-- Технический комментарий, не имеющий отношение к методу (пункт 1)




// TODO обратить внимание на анлогичный класс в sbarter
public class Exchange {}
-- Технический комментарий, не имеющий отношение к методу (пункт 1)




// Просьба не использовать данный класс, нуждается в переработке
@Deprecated
public class CoordinationCode {}
-- Комментарий дублирует аннотацию (пункт 4)




// Определение доставки до порта и разгрузки в хранилище
public boolean isPortShipment(Shipment shipment) {}
-- Комментарий не отражает функцию, т.к нет определения для погрузки в хранилище (пункт 3)




// public DepositDto buildDeposit() {
//  return Deposit.builder
//              .setCode(DEFAULT_DEPOSIT_CODE)
//              .build();
// }
-- Закомментированный код в проекте (пункт 11)




// Проверка запроса на дублирование
OperationDto operationDto = operationRepository.getByOperationId(event.getOpertionId());
if (operationDto != null ) {}
-- Комментарий успешно можно заменить на отдельный метод isOperationDuplicated() (пункт 12)




// Метод запуска шедуллера для проверки ответа от Атл
public void callScheduler() {}
-- Убрал бы комментарий, т.к достаточно самого названия (пункт 7)




// Для конфигурации библиотеки простба прочитать документацию в confluence
public class MailSender {}
-- Комментарий не несет никакого объяснения (пункт 4)