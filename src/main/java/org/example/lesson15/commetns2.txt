// TODO Вызов сборщика делается из-за большой нагрузки как очень вынужденная мера и ждет рефакторинга в следующей версии
System.gc();
-- Исправлен по пункту 6 TODO




// TODO В данном случае Lazy выбран из-за большого кол-ва связей в таблице, которая скоро будет переработана
@ManyToOne(fetch = FetchType.LAZY, mappedBy = "user")
-- Исправлен по пункту 6 TODO




// TODO Данный модуль будет вынесен в отдельную библиотеку
-- Исправлен по пункту 6 TODO




// Строка можеь прийти с лишними пробелами, не забывайте использовать trim()
public void doFilter(String producerName) {}
-- Исправлен по пункту 5 Усиление




// Заполнение поля глобальной ошибки остановит парсинг документа
result.buildWithGlobalError();
-- Уточняющий комментарий с прояснениями к сторонней библиотеке, к которой нет доступа




// Заполнение поля ошибки отобразит ошибку только для строк, которые должны распарситься в данный объект
result.buildWithError();
-- Уточняющий комментарий с прояснениями к сторонней библиотеке, к которой нет доступа




// Возникает ошибка связанная с неправильным полем печати у документа, выставляйте границы поля вручную
poi.setPrintedSize();
-- Исправлен по пункту 5 Усиление




// Адрес почты должен соответствовать условиям документации
MailValidator.validate(String email);
-- Информативный комментарий




<!-- Скрипт необходим для тестирования пересохранения с новыми статусами -->
-- Информативный комментарий для скрипта заполнения тестовой базы данных




// TODO На данный момент сервис возвращает ответ 200 независимо от результата обработки, новая функциональность будет добавлена позднее
public ResponseEntity buildActs(@RequestBody ActInfo actInfo) {}
-- Исправлен по пункту 6 TODO




// Необходимо сгенерировать новые id для дальнейшего взаимодействия с entity
acts.stream()
.flatMap(act -> actRepository.getLinkActs(act))
.map(act -> act.setId(UUID.randomUUID()))
.collect(Collectors.toList())
-- Исправлен по пункту 2 Представление намерений




// Для бизнеслогики необходима сортировка актов по имени
users.sort(Comparator.comparing(User::getName));
-- Информативный комментарий